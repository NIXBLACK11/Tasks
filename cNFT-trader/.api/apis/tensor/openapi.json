{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "GetUserPortfolioCollectionsQueryParams": {
        "properties": {
          "wallet": {
            "type": "string",
            "description": "The wallet address to search for"
          },
          "includeBidCount": {
            "type": "boolean",
            "description": "Include bid count per collection"
          },
          "includeFavouriteCount": {
            "type": "boolean",
            "description": "Include favourite count per collection"
          },
          "includeUnverified": {
            "type": "boolean",
            "description": "Include unverified collections"
          },
          "includeCompressed": {
            "type": "boolean",
            "description": "Include compressed collections"
          },
          "currencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Currencies to filter for (default has only SOL listings)"
          }
        },
        "required": [
          "wallet"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CollectionMintsSortBy": {
        "enum": [
          "ListingPriceAsc",
          "ListingPriceDesc",
          "ListingNormalizedPriceAsc",
          "ListingNormalizedPriceDesc",
          "HybridAmountAsc",
          "HybridAmountDesc",
          "LastSaleAsc",
          "LastSaleDesc",
          "ListedTimeDesc",
          "RankHrttAsc",
          "RankHrttDesc",
          "RankStatAsc",
          "RankStatDesc",
          "RankTeamAsc",
          "RankTeamDesc",
          "RankTnAsc",
          "RankTnDesc",
          "OrdinalAsc",
          "OrdinalDesc"
        ],
        "type": "string"
      },
      "RaritySystem": {
        "enum": [
          "Hrtt",
          "Stat",
          "Team",
          "Tn"
        ],
        "type": "string"
      },
      "ImmutableStatus": {
        "enum": [
          "BOTH",
          "IMMUTABLE_ONLY",
          "MUTABLE_ONLY"
        ],
        "type": "string"
      },
      "GetMintsByUserQueryParams": {
        "properties": {
          "wallet": {
            "type": "string",
            "description": "The wallet address to search by"
          },
          "sortBy": {
            "description": "The order in with the NFTs should be returned",
            "enum": [
              "ListingPriceAsc",
              "ListingPriceDesc",
              "ListingNormalizedPriceAsc",
              "ListingNormalizedPriceDesc",
              "HybridAmountAsc",
              "HybridAmountDesc",
              "LastSaleAsc",
              "LastSaleDesc",
              "ListedTimeDesc",
              "RankHrttAsc",
              "RankHrttDesc",
              "RankStatAsc",
              "RankStatDesc",
              "RankTeamAsc",
              "RankTeamDesc",
              "RankTnAsc",
              "RankTnDesc",
              "OrdinalAsc",
              "OrdinalDesc"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of mint addresses to return",
            "minimum": 1,
            "maximum": 250
          },
          "mints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The list of mints for filter for."
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response."
          },
          "minPrice": {
            "type": "number",
            "format": "float",
            "description": "The minimum price of to filter for",
            "minimum": 0
          },
          "maxPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price to filter for",
            "minimum": 0
          },
          "traitCountMin": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum number of traits to filter for",
            "minimum": 0
          },
          "traitCountMax": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of traits to filter for",
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the NFT to filter for"
          },
          "includeCurrencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Currencies to include in results"
          },
          "traits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Traits and values to filter for\nFormat must match the following JSON string: `{\"trait_type\": [\"value1\", \"value2\"]}`",
            "example": {
              "trait_type": [
                "value1",
                "value2"
              ]
            }
          },
          "raritySystem": {
            "description": "Rarity System to use when filtering for rarity",
            "enum": [
              "Hrtt",
              "Stat",
              "Team",
              "Tn"
            ],
            "type": "string"
          },
          "rarityMin": {
            "type": "number",
            "format": "float",
            "description": "Minimum rarity points to return in results",
            "minimum": 0
          },
          "rarityMax": {
            "type": "number",
            "format": "float",
            "description": "Maximum rarity points to return in results",
            "minimum": 0
          },
          "onlyInscriptions": {
            "type": "boolean",
            "description": "Filter to include only Solana Inscriptions"
          },
          "immutableStatus": {
            "description": "Filter the immutability of the Inscriptions",
            "enum": [
              "BOTH",
              "IMMUTABLE_ONLY",
              "MUTABLE_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "wallet",
          "sortBy",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "MintsSortBy": {
        "enum": [
          "PriceAsc",
          "PriceDesc",
          "NormalizedPriceAsc",
          "NormalizedPriceDesc",
          "HybridAmountAsc",
          "HybridAmountDesc",
          "LastSaleAsc",
          "LastSaleDesc",
          "ListedDesc",
          "RankHrttAsc",
          "RankHrttDesc",
          "RankStatAsc",
          "RankStatDesc",
          "RankTeamAsc",
          "RankTeamDesc",
          "RankTnAsc",
          "RankTnDesc",
          "OrdinalAsc",
          "OrdinalDesc"
        ],
        "type": "string"
      },
      "GetUserActiveListingsQueryParams": {
        "properties": {
          "wallets": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of wallet addresses to search for"
          },
          "sortBy": {
            "description": "The order in which listings are returned",
            "enum": [
              "PriceAsc",
              "PriceDesc",
              "NormalizedPriceAsc",
              "NormalizedPriceDesc",
              "HybridAmountAsc",
              "HybridAmountDesc",
              "LastSaleAsc",
              "LastSaleDesc",
              "ListedDesc",
              "RankHrttAsc",
              "RankHrttDesc",
              "RankStatAsc",
              "RankStatDesc",
              "RankTeamAsc",
              "RankTeamDesc",
              "RankTnAsc",
              "RankTnDesc",
              "OrdinalAsc",
              "OrdinalDesc"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of results to return",
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response"
          },
          "collId": {
            "type": "string",
            "description": "The collection ID of the listing to filter for"
          },
          "currencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Currencies to filter for (default has only SOL listings)"
          }
        },
        "required": [
          "wallets",
          "sortBy",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetUserTCompBidsQueryParams": {
        "properties": {
          "owner": {
            "type": "string",
            "description": "The wallet address that made the bid",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of results to return",
            "minimum": 1,
            "maximum": 500
          },
          "collId": {
            "type": "string",
            "description": "The collection ID to filter by"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor returned from the previous response"
          },
          "bidAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Specific bid addresses to filter for"
          }
        },
        "required": [
          "owner",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetUserTSwapPoolsQueryParams": {
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the tswap order",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$"
          },
          "poolAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Specific pool addresses to filter for"
          }
        },
        "required": [
          "owner"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TransactionType": {
        "enum": [
          "LIST",
          "DELIST",
          "ADJUST_PRICE",
          "PLACE_BID",
          "CANCEL_BID",
          "SALE_BUY_NOW",
          "SALE_ACCEPT_BID",
          "TRANSFER",
          "FAILED",
          "OTHER",
          "AUCTION_CREATE",
          "AUCTION_PLACE_BID",
          "AUCTION_SETTLE",
          "AUCTION_CANCEL",
          "CREATE_MINT",
          "UPDATE_MINT",
          "SWAP_INIT_POOL",
          "SWAP_CLOSE_POOL",
          "SWAP_EDIT_POOL",
          "SWAP_DEPOSIT_NFT",
          "SWAP_DEPOSIT_SOL",
          "SWAP_BUY_NFT",
          "SWAP_SELL_NFT",
          "SWAP_WITHDRAW_NFT",
          "SWAP_WITHDRAW_SOL",
          "SWAP_WITHDRAW_MM_FEE",
          "SWAP_EDIT_SINGLE_LISTING",
          "SWAP_DEPOSIT_LIQ",
          "SWAP_WITHDRAW_LIQ",
          "ELIXIR_APPRAISE",
          "ELIXIR_FRACTIONALIZE",
          "ELIXIR_FUSE",
          "ELIXIR_POOL_DEPOSIT_FNFT",
          "ELIXIR_POOL_WITHDRAW_FNFT",
          "ELIXIR_POOL_EXCHANGE_FNFT",
          "ELIXIR_SELL_PNFT",
          "ELIXIR_BUY_PNFT",
          "ELIXIR_COMPOSED_BUY_NFT",
          "ELIXIR_COMPOSED_SELL_NFT",
          "MARGIN_INIT",
          "MARGIN_DEPOSIT",
          "MARGIN_WITHDRAW",
          "MARGIN_CLOSE",
          "MARGIN_ATTACH",
          "MARGIN_DETACH",
          "SWAP_LIST",
          "SWAP_DELIST",
          "SWAP_BUY_SINGLE_LISTING",
          "OTC_BUNDLED_MAKE_OFFER",
          "OTC_BUNDLED_TAKE_OFFER",
          "OTC_BUNDLED_TAKER_WITHDRAW",
          "OTC_BUNDLED_MAKER_WITHDRAW",
          "STAKE",
          "UNSTAKE",
          "ROLL_COMMIT",
          "ROLL_FULFILL_NONE",
          "ROLL_FULFILL_REWARD",
          "ROLL_FULFILL_SOL",
          "LOCK_UPSERT_ORDER",
          "LOCK_LOCK_ORDER",
          "LOCK_CLOSE_ORDER",
          "LOCK_WITHDRAW_NFT",
          "LOCK_DEPOSIT_NFT",
          "LOCK_WITHDRAW_COLLATERAL",
          "LOCK_CLAIM_TOKENS",
          "LOCK_CLAIM_NFT",
          "LOCK_ORDER_SELL_NFT",
          "LOCK_ORDER_BUY_NFT",
          "LOCK_MARKET_SELL_NFT",
          "LOCK_MARKET_BUY_NFT"
        ],
        "type": "string"
      },
      "GetUserTransactionsQueryParams": {
        "properties": {
          "wallets": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of wallet addresses to search for"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of transactions to return",
            "minimum": 1,
            "maximum": 100
          },
          "txTypes": {
            "items": {
              "enum": [
                "LIST",
                "DELIST",
                "ADJUST_PRICE",
                "PLACE_BID",
                "CANCEL_BID",
                "SALE_BUY_NOW",
                "SALE_ACCEPT_BID",
                "TRANSFER",
                "FAILED",
                "OTHER",
                "AUCTION_CREATE",
                "AUCTION_PLACE_BID",
                "AUCTION_SETTLE",
                "AUCTION_CANCEL",
                "CREATE_MINT",
                "UPDATE_MINT",
                "SWAP_INIT_POOL",
                "SWAP_CLOSE_POOL",
                "SWAP_EDIT_POOL",
                "SWAP_DEPOSIT_NFT",
                "SWAP_DEPOSIT_SOL",
                "SWAP_BUY_NFT",
                "SWAP_SELL_NFT",
                "SWAP_WITHDRAW_NFT",
                "SWAP_WITHDRAW_SOL",
                "SWAP_WITHDRAW_MM_FEE",
                "SWAP_EDIT_SINGLE_LISTING",
                "SWAP_DEPOSIT_LIQ",
                "SWAP_WITHDRAW_LIQ",
                "ELIXIR_APPRAISE",
                "ELIXIR_FRACTIONALIZE",
                "ELIXIR_FUSE",
                "ELIXIR_POOL_DEPOSIT_FNFT",
                "ELIXIR_POOL_WITHDRAW_FNFT",
                "ELIXIR_POOL_EXCHANGE_FNFT",
                "ELIXIR_SELL_PNFT",
                "ELIXIR_BUY_PNFT",
                "ELIXIR_COMPOSED_BUY_NFT",
                "ELIXIR_COMPOSED_SELL_NFT",
                "MARGIN_INIT",
                "MARGIN_DEPOSIT",
                "MARGIN_WITHDRAW",
                "MARGIN_CLOSE",
                "MARGIN_ATTACH",
                "MARGIN_DETACH",
                "SWAP_LIST",
                "SWAP_DELIST",
                "SWAP_BUY_SINGLE_LISTING",
                "OTC_BUNDLED_MAKE_OFFER",
                "OTC_BUNDLED_TAKE_OFFER",
                "OTC_BUNDLED_TAKER_WITHDRAW",
                "OTC_BUNDLED_MAKER_WITHDRAW",
                "STAKE",
                "UNSTAKE",
                "ROLL_COMMIT",
                "ROLL_FULFILL_NONE",
                "ROLL_FULFILL_REWARD",
                "ROLL_FULFILL_SOL",
                "LOCK_UPSERT_ORDER",
                "LOCK_LOCK_ORDER",
                "LOCK_CLOSE_ORDER",
                "LOCK_WITHDRAW_NFT",
                "LOCK_DEPOSIT_NFT",
                "LOCK_WITHDRAW_COLLATERAL",
                "LOCK_CLAIM_TOKENS",
                "LOCK_CLAIM_NFT",
                "LOCK_ORDER_SELL_NFT",
                "LOCK_ORDER_BUY_NFT",
                "LOCK_MARKET_SELL_NFT",
                "LOCK_MARKET_BUY_NFT"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "Transaction type to filter by."
          },
          "collId": {
            "type": "string",
            "description": "Collection ID to filter by"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response"
          }
        },
        "required": [
          "wallets",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetEscrowAccountsQueryParams": {
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner of the escrow accounts to search for",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$"
          }
        },
        "required": [
          "owner"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetUserInventoryQueryParams": {
        "properties": {
          "wallet": {
            "type": "string",
            "description": "The wallet address to search for"
          },
          "collId": {
            "type": "string",
            "description": "The collection ID to filter by"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of NFTs to return",
            "minimum": 1,
            "maximum": 250
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response"
          }
        },
        "required": [
          "wallet",
          "collId",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Attribute": {
        "properties": {
          "trait_type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "trait_type",
          "value"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TokenStandard": {
        "type": "string",
        "enum": [
          "NON_FUNGIBLE",
          "FUNGIBLE_ASSET",
          "FUNGIBLE",
          "NON_FUNGIBLE_EDITION",
          "PROGRAMMABLE_NON_FUNGIBLE",
          "PROGRAMMABLE_NON_FUNGIBLE_EDITION"
        ]
      },
      "MetadataFile": {
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Prisma.JsonValue": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number",
            "format": "double"
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/Prisma.JsonObject"
          },
          {
            "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON array.",
            "properties": {},
            "type": "object",
            "additionalProperties": false
          }
        ],
        "nullable": true,
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches any valid JSON value."
      },
      "Prisma.JsonObject": {
        "properties": {},
        "additionalProperties": {
          "$ref": "#/components/schemas/Prisma.JsonValue"
        },
        "type": "object",
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON object.\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from."
      },
      "Prisma.JsonArray": {
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON array.",
        "properties": {},
        "type": "object",
        "additionalProperties": false
      },
      "Currency": {
        "enum": [
          "SOL_LAMPORT",
          "ETH_WEI"
        ],
        "type": "string"
      },
      "Decimal": {
        "type": "string"
      },
      "TLastSale": {
        "properties": {
          "priceUnit": {
            "enum": [
              "SOL_LAMPORT",
              "ETH_WEI"
            ],
            "type": "string"
          },
          "price": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string"
              },
              {
                "type": "number",
                "format": "double"
              }
            ]
          },
          "txAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "priceUnit",
          "price",
          "txAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StakeDetails": {
        "properties": {
          "stakedAt": {
            "type": "string",
            "format": "date-time"
          },
          "activatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "stakedByOwner": {
            "type": "string"
          }
        },
        "required": [
          "stakedAt",
          "activatedAt",
          "stakedByOwner"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "InscriptionSpl20Data": {
        "properties": {
          "p": {
            "type": "string"
          },
          "tick": {
            "type": "string"
          },
          "amt": {
            "type": "string"
          }
        },
        "required": [
          "p",
          "tick",
          "amt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "InscriptionData": {
        "properties": {
          "inscription": {
            "type": "string",
            "nullable": true
          },
          "inscriptionData": {
            "type": "string"
          },
          "immutable": {
            "type": "boolean"
          },
          "order": {
            "type": "string"
          },
          "spl20": {
            "allOf": [
              {
                "properties": {
                  "p": {
                    "type": "string"
                  },
                  "tick": {
                    "type": "string"
                  },
                  "amt": {
                    "type": "string"
                  }
                },
                "required": [
                  "p",
                  "tick",
                  "amt"
                ],
                "type": "object",
                "additionalProperties": false
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "inscription",
          "inscriptionData",
          "immutable",
          "order"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TokenProgram": {
        "type": "string",
        "enum": [
          "SPL_TOKEN",
          "SPL_TOKEN_2022",
          "MPL_CORE",
          "BUBBLEGUM"
        ]
      },
      "MetadataProgram": {
        "type": "string",
        "enum": [
          "SPL_TOKEN_2022",
          "MPL_CORE",
          "TOKEN_METADATA"
        ]
      },
      "MintWithColl": {
        "properties": {
          "onchainId": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "tokenStandard": {
            "allOf": [
              {
                "type": "string",
                "enum": [
                  "NON_FUNGIBLE",
                  "FUNGIBLE_ASSET",
                  "FUNGIBLE",
                  "NON_FUNGIBLE_EDITION",
                  "PROGRAMMABLE_NON_FUNGIBLE",
                  "PROGRAMMABLE_NON_FUNGIBLE_EDITION"
                ]
              }
            ],
            "nullable": true
          },
          "tokenEdition": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "imageUri": {
            "type": "string",
            "nullable": true
          },
          "metadataUri": {
            "type": "string",
            "nullable": true
          },
          "metadataFetchedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "files": {
            "items": {
              "properties": {
                "type": {
                  "type": "string",
                  "nullable": true
                },
                "uri": {
                  "type": "string",
                  "nullable": true
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "type": "array",
            "nullable": true
          },
          "sellRoyaltyFeeBPS": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "attributes": {
            "items": {
              "properties": {
                "trait_type": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "trait_type",
                "value"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "type": "array",
            "nullable": true
          },
          "animationUri": {
            "type": "string",
            "nullable": true
          },
          "rarityRankTT": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankTTStat": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankTTCustom": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankHR": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankTN": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankHrtt": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankStat": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankTeam": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rarityRankTn": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lastSale": {
            "allOf": [
              {
                "properties": {
                  "priceUnit": {
                    "enum": [
                      "SOL_LAMPORT",
                      "ETH_WEI"
                    ],
                    "type": "string"
                  },
                  "price": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "number",
                        "format": "double"
                      }
                    ]
                  },
                  "txAt": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "date-time"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                "required": [
                  "priceUnit",
                  "price",
                  "txAt"
                ],
                "type": "object",
                "additionalProperties": false
              }
            ],
            "nullable": true
          },
          "accState": {
            "type": "string",
            "nullable": true
          },
          "hidden": {
            "type": "boolean"
          },
          "compressed": {
            "type": "boolean"
          },
          "verifiedCollection": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          },
          "staked": {
            "allOf": [
              {
                "properties": {
                  "stakedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "activatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "stakedByOwner": {
                    "type": "string"
                  }
                },
                "required": [
                  "stakedAt",
                  "activatedAt",
                  "stakedByOwner"
                ],
                "type": "object",
                "additionalProperties": false
              }
            ],
            "nullable": true
          },
          "inscription": {
            "allOf": [
              {
                "properties": {
                  "inscription": {
                    "type": "string",
                    "nullable": true
                  },
                  "inscriptionData": {
                    "type": "string"
                  },
                  "immutable": {
                    "type": "boolean"
                  },
                  "order": {
                    "type": "string"
                  },
                  "spl20": {
                    "allOf": [
                      {
                        "properties": {
                          "p": {
                            "type": "string"
                          },
                          "tick": {
                            "type": "string"
                          },
                          "amt": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "p",
                          "tick",
                          "amt"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      }
                    ],
                    "nullable": true
                  }
                },
                "required": [
                  "inscription",
                  "inscriptionData",
                  "immutable",
                  "order"
                ],
                "type": "object",
                "additionalProperties": false
              }
            ],
            "nullable": true
          },
          "tokenProgram": {
            "allOf": [
              {
                "type": "string",
                "enum": [
                  "SPL_TOKEN",
                  "SPL_TOKEN_2022",
                  "MPL_CORE",
                  "BUBBLEGUM"
                ]
              }
            ],
            "nullable": true
          },
          "metadataProgram": {
            "allOf": [
              {
                "type": "string",
                "enum": [
                  "SPL_TOKEN_2022",
                  "MPL_CORE",
                  "TOKEN_METADATA"
                ]
              }
            ],
            "nullable": true
          },
          "transferHookProgram": {
            "type": "string",
            "nullable": true
          },
          "listingNormalizedPrice": {
            "type": "string",
            "nullable": true
          },
          "hybridAmount": {
            "type": "string",
            "nullable": true
          },
          "collId": {
            "type": "string"
          },
          "collName": {
            "type": "string"
          },
          "slugDisplay": {
            "type": "string",
            "nullable": true
          },
          "numMints": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": [
          "onchainId",
          "hidden",
          "compressed",
          "collId",
          "collName",
          "slug"
        ],
        "type": "object",
        "additionalProperties": false,
        "deprecated": true
      },
      "GetMintQueryParams": {
        "properties": {
          "mint": {
            "type": "string",
            "description": "The mint addresses to fetch"
          }
        },
        "required": [
          "mint"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "RefreshRarities": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID of the mint to filter bby"
          }
        },
        "required": [
          "collId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockCollectionsSortBy": {
        "enum": [
          "NFTS_DEPOSITED",
          "TOKENS_DEPOSITED",
          "BEST_TOKEN_PRICE",
          "BEST_NFT_PRICE"
        ],
        "type": "string"
      },
      "TLockCollectionsQueryParams": {
        "properties": {
          "sortBy": {
            "description": "The order in which collections are sorted",
            "enum": [
              "NFTS_DEPOSITED",
              "TOKENS_DEPOSITED",
              "BEST_TOKEN_PRICE",
              "BEST_NFT_PRICE"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of results to return",
            "minimum": 1,
            "maximum": 250
          },
          "collIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The collection IDs to filter by"
          },
          "name": {
            "type": "string",
            "description": "Name of the collection to filter by"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response."
          }
        },
        "required": [
          "sortBy",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockCollectionRatesResponseRest": {
        "properties": {
          "durationSec": {
            "type": "number",
            "format": "double"
          },
          "aprBps": {
            "type": "number",
            "format": "double"
          },
          "collId": {
            "type": "string"
          }
        },
        "required": [
          "durationSec",
          "aprBps",
          "collId"
        ],
        "type": "object"
      },
      "TLockCollectionRatesQueryParams": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection Id to get details for"
          }
        },
        "required": [
          "collId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockOrderSortBy": {
        "enum": [
          "LOCKED_UNTIL_ASC",
          "LOCKED_UNTIL_DESC",
          "PRICE_ASC",
          "PRICE_DESC"
        ],
        "type": "string"
      },
      "TLockOrderType": {
        "enum": [
          "TOKEN",
          "NFT"
        ],
        "type": "string"
      },
      "TLockOrderStatus": {
        "enum": [
          "PENDING",
          "OFFERED",
          "LOCKED",
          "EXPIRED",
          "EXERCISED"
        ],
        "type": "string"
      },
      "TLockOrdersQueryParams": {
        "properties": {
          "sortBy": {
            "description": "The order in which collections are sorted",
            "enum": [
              "LOCKED_UNTIL_ASC",
              "LOCKED_UNTIL_DESC",
              "PRICE_ASC",
              "PRICE_DESC"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of results to return",
            "minimum": 1,
            "maximum": 250
          },
          "orderType": {
            "description": "The type of order to filter for",
            "enum": [
              "TOKEN",
              "NFT"
            ],
            "type": "string"
          },
          "collId": {
            "type": "string",
            "description": "The collection Id to filter by"
          },
          "statuses": {
            "items": {
              "enum": [
                "PENDING",
                "OFFERED",
                "LOCKED",
                "EXPIRED",
                "EXERCISED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "Price lock status to filter for"
          },
          "taker": {
            "type": "string",
            "description": "The wallet address of the taker to filter by"
          },
          "maker": {
            "type": "string",
            "description": "The wallet address of the maker to filter by"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response"
          }
        },
        "required": [
          "sortBy",
          "limit",
          "orderType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockCollectionStatsQueryParams": {
        "properties": {
          "statuses": {
            "items": {
              "enum": [
                "PENDING",
                "OFFERED",
                "LOCKED",
                "EXPIRED",
                "EXERCISED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "Price lock status to filter by"
          },
          "orderType": {
            "description": "The type of order to filter by",
            "enum": [
              "TOKEN",
              "NFT"
            ],
            "type": "string"
          },
          "taker": {
            "type": "string",
            "description": "The wallet address of the taker to filter by"
          },
          "maker": {
            "type": "string",
            "description": "The wallet address of the maker to filter by"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "_64_solana_47_web3.js.PublicKey": {
        "type": "string",
        "description": "A public key"
      },
      "GetInitializeMarketQueryParams": {
        "properties": {
          "payer": {
            "description": "Payer public key address.",
            "type": "string"
          },
          "marketAuthority": {
            "description": "Market authority public key address.",
            "type": "string"
          },
          "baseMint": {
            "description": "Base token mint public key address.",
            "type": "string"
          },
          "quoteMint": {
            "description": "Quote token mint public key address.",
            "type": "string"
          },
          "market": {
            "description": "Market public key address.",
            "type": "string"
          },
          "takerFeeBps": {
            "type": "number",
            "format": "double",
            "description": "Taker fee basis points."
          },
          "minOrderSize": {
            "type": "number",
            "format": "double",
            "description": "Minimum order size in base currency units."
          },
          "tickSize": {
            "type": "number",
            "format": "double",
            "description": "Tick size in quote currency units."
          }
        },
        "required": [
          "payer",
          "marketAuthority",
          "baseMint",
          "quoteMint",
          "market",
          "takerFeeBps",
          "minOrderSize",
          "tickSize"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetApproveSeatQueryParams": {
        "properties": {
          "payer": {
            "description": "Payer public key address.",
            "type": "string"
          },
          "trader": {
            "description": "Trader public key address.",
            "type": "string"
          },
          "marketAuthority": {
            "description": "Market authority public key address.",
            "type": "string"
          },
          "market": {
            "description": "Market public key address.",
            "type": "string"
          }
        },
        "required": [
          "payer",
          "trader",
          "marketAuthority",
          "market"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListQueryParams": {
        "properties": {
          "payer": {
            "description": "Payer public key address.",
            "type": "string"
          },
          "maker": {
            "description": "Maker public key address.",
            "type": "string"
          },
          "market": {
            "description": "Market public key address.",
            "type": "string"
          },
          "priceInTicks": {
            "type": "number",
            "format": "double",
            "description": "Price of each SFT in ticks."
          },
          "numBaseLots": {
            "type": "number",
            "format": "double",
            "description": "Number of SFTS to list in base lots."
          }
        },
        "required": [
          "payer",
          "maker",
          "market",
          "priceInTicks",
          "numBaseLots"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetEditQueryParams": {
        "properties": {
          "maker": {
            "description": "Trader public key address.",
            "type": "string"
          },
          "market": {
            "description": "Market public key address.",
            "type": "string"
          },
          "orderSequenceNumber": {
            "type": "number",
            "format": "double",
            "description": "Sequence number of the order to cancel."
          },
          "newNumBaseLots": {
            "type": "number",
            "format": "double",
            "description": "Number of SFTS to list in base lots."
          }
        },
        "required": [
          "maker",
          "market",
          "orderSequenceNumber",
          "newNumBaseLots"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetBuyQueryParams": {
        "properties": {
          "trader": {
            "description": "Trader public key address.",
            "type": "string"
          },
          "market": {
            "description": "Market public key address.",
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Number of SFTS to purchase."
          },
          "orderType": {
            "type": "string",
            "description": "Order Type: Immediate or Cancel (IOC), or Fill or Kill (FOK).\nDefaults to IOC."
          }
        },
        "required": [
          "trader",
          "market",
          "amount",
          "orderType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetCancelQueryParams": {
        "properties": {
          "payer": {
            "description": "Payer public key address.",
            "type": "string"
          },
          "trader": {
            "description": "Trader public key address.",
            "type": "string"
          },
          "market": {
            "description": "Market public key address.",
            "type": "string"
          },
          "orderSequenceNumber": {
            "type": "number",
            "format": "double",
            "description": "Sequence number of the order to cancel."
          }
        },
        "required": [
          "payer",
          "trader",
          "market",
          "orderSequenceNumber"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetListingsQueryParams": {
        "properties": {
          "market": {
            "description": "Market public key address.",
            "type": "string"
          }
        },
        "required": [
          "market"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetMintProofQueryParams": {
        "properties": {
          "whitelist": {
            "type": "string",
            "description": "The whitelist address of the collection"
          },
          "mint": {
            "type": "string",
            "description": "The mint address in the collection to fetch proofs for"
          }
        },
        "required": [
          "whitelist",
          "mint"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetWhitelistInfoQueryParams": {
        "properties": {
          "collIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Collection IDs to get whitelist details for"
          },
          "whitelists": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Whitelist addresses of collections"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "PriorityFees": {
        "properties": {
          "min": {
            "type": "number",
            "format": "double",
            "description": "0th percentile"
          },
          "low": {
            "type": "number",
            "format": "double",
            "description": "25th percentile"
          },
          "medium": {
            "type": "number",
            "format": "double",
            "description": "50th percentile"
          },
          "high": {
            "type": "number",
            "format": "double",
            "description": "75th percentile"
          },
          "veryHigh": {
            "type": "number",
            "format": "double",
            "description": "95th percentile"
          }
        },
        "required": [
          "min",
          "low",
          "medium",
          "high",
          "veryHigh"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetMultipleMintsQueryParams": {
        "properties": {
          "mints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The mint addresses to fetch"
          }
        },
        "required": [
          "mints"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DataSource": {
        "enum": [
          "ONCHAIN",
          "MAGICEDEN",
          "MAGICEDEN_V2",
          "MAGICEDEN_AUCTION",
          "SMB",
          "SMB_V2",
          "SOLANART",
          "SOLSEA",
          "ALPHA",
          "DIGITALEYEZ",
          "DIGITALEYEZ_V2",
          "AUCTION_HOUSE",
          "HYPERSPACE",
          "YAWWW",
          "TOKEN_METADATA",
          "TENSORSWAP",
          "TENSORBID",
          "TCOMP",
          "HADESWAP",
          "ELIXIR",
          "ELIXIR_COMPOSED",
          "BUBBLEGUM",
          "SWAPSORIAN",
          "TSTAKE",
          "TROLL",
          "SPL_TOKEN",
          "TOKEN22_TOKEN",
          "MPL_CORE",
          "TGARD",
          "TLOCK"
        ],
        "type": "string"
      },
      "GetMintsByCollIdQueryParams": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID of the mint to filter for"
          },
          "sortBy": {
            "description": "The order in with the NFTs should be returned",
            "enum": [
              "ListingPriceAsc",
              "ListingPriceDesc",
              "ListingNormalizedPriceAsc",
              "ListingNormalizedPriceDesc",
              "HybridAmountAsc",
              "HybridAmountDesc",
              "LastSaleAsc",
              "LastSaleDesc",
              "ListedTimeDesc",
              "RankHrttAsc",
              "RankHrttDesc",
              "RankStatAsc",
              "RankStatDesc",
              "RankTeamAsc",
              "RankTeamDesc",
              "RankTnAsc",
              "RankTnDesc",
              "OrdinalAsc",
              "OrdinalDesc"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of mint addresses to return",
            "minimum": 1,
            "maximum": 250
          },
          "onlyListings": {
            "type": "boolean",
            "description": "Hide unlisted NFTs"
          },
          "mints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The list of mints for filter for."
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response."
          },
          "listingSources": {
            "items": {
              "enum": [
                "ONCHAIN",
                "MAGICEDEN",
                "MAGICEDEN_V2",
                "MAGICEDEN_AUCTION",
                "SMB",
                "SMB_V2",
                "SOLANART",
                "SOLSEA",
                "ALPHA",
                "DIGITALEYEZ",
                "DIGITALEYEZ_V2",
                "AUCTION_HOUSE",
                "HYPERSPACE",
                "YAWWW",
                "TOKEN_METADATA",
                "TENSORSWAP",
                "TENSORBID",
                "TCOMP",
                "HADESWAP",
                "ELIXIR",
                "ELIXIR_COMPOSED",
                "BUBBLEGUM",
                "SWAPSORIAN",
                "TSTAKE",
                "TROLL",
                "SPL_TOKEN",
                "TOKEN22_TOKEN",
                "MPL_CORE",
                "TGARD",
                "TLOCK"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "Sources to agregate listings from"
          },
          "minPrice": {
            "type": "number",
            "format": "float",
            "description": "The minimum price of to filter for",
            "minimum": 0
          },
          "maxPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price to filter for",
            "minimum": 0
          },
          "traitCountMin": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum number of traits to filter for",
            "minimum": 0
          },
          "traitCountMax": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of traits to filter for",
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the NFT to filter for"
          },
          "excludeOwners": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Owners to exclude in results"
          },
          "includeOwners": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Owners to include in results"
          },
          "includeCurrencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Currencies to include in results"
          },
          "traits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Traits and values to filter for\nFormat must match the following JSON string: `{\"trait_type\": [\"value1\", \"value2\"]}`",
            "example": {
              "trait_type": [
                "value1",
                "value2"
              ]
            }
          },
          "raritySystem": {
            "description": "Rarity System to use when filtering for rarity",
            "enum": [
              "Hrtt",
              "Stat",
              "Team",
              "Tn"
            ],
            "type": "string"
          },
          "rarityMin": {
            "type": "number",
            "format": "float",
            "description": "Minimum rarity points to return in results",
            "minimum": 0
          },
          "rarityMax": {
            "type": "number",
            "format": "float",
            "description": "Maximum rarity points to return in results",
            "minimum": 0
          },
          "onlyInscriptions": {
            "type": "boolean",
            "description": "Filter to include only Solana Inscriptions"
          },
          "immutableStatus": {
            "description": "Filter the immutability of the Inscriptions",
            "enum": [
              "BOTH",
              "IMMUTABLE_ONLY",
              "MUTABLE_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "collId",
          "sortBy",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetActiveListings": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID of the mint to filter for"
          },
          "sortBy": {
            "description": "The order in with the NFTs should be returned",
            "enum": [
              "ListingPriceAsc",
              "ListingPriceDesc",
              "ListingNormalizedPriceAsc",
              "ListingNormalizedPriceDesc",
              "HybridAmountAsc",
              "HybridAmountDesc",
              "LastSaleAsc",
              "LastSaleDesc",
              "ListedTimeDesc",
              "RankHrttAsc",
              "RankHrttDesc",
              "RankStatAsc",
              "RankStatDesc",
              "RankTeamAsc",
              "RankTeamDesc",
              "RankTnAsc",
              "RankTnDesc",
              "OrdinalAsc",
              "OrdinalDesc"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of mint addresses to return",
            "minimum": 1,
            "maximum": 250
          },
          "mints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The list of mints for filter for."
          },
          "cursor": {
            "type": "string",
            "description": "The cursor string received in the previous response."
          },
          "listingSources": {
            "items": {
              "enum": [
                "ONCHAIN",
                "MAGICEDEN",
                "MAGICEDEN_V2",
                "MAGICEDEN_AUCTION",
                "SMB",
                "SMB_V2",
                "SOLANART",
                "SOLSEA",
                "ALPHA",
                "DIGITALEYEZ",
                "DIGITALEYEZ_V2",
                "AUCTION_HOUSE",
                "HYPERSPACE",
                "YAWWW",
                "TOKEN_METADATA",
                "TENSORSWAP",
                "TENSORBID",
                "TCOMP",
                "HADESWAP",
                "ELIXIR",
                "ELIXIR_COMPOSED",
                "BUBBLEGUM",
                "SWAPSORIAN",
                "TSTAKE",
                "TROLL",
                "SPL_TOKEN",
                "TOKEN22_TOKEN",
                "MPL_CORE",
                "TGARD",
                "TLOCK"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "Sources to agregate listings from"
          },
          "minPrice": {
            "type": "number",
            "format": "float",
            "description": "The minimum price of to filter for",
            "minimum": 0
          },
          "maxPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price to filter for",
            "minimum": 0
          },
          "traitCountMin": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum number of traits to filter for",
            "minimum": 0
          },
          "traitCountMax": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of traits to filter for",
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the NFT to filter for"
          },
          "excludeOwners": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Owners to exclude in results"
          },
          "includeOwners": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Owners to include in results"
          },
          "includeCurrencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Currencies to include in results"
          },
          "traits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Traits and values to filter for\nFormat must match the following JSON string: `{\"trait_type\": [\"value1\", \"value2\"]}`",
            "example": {
              "trait_type": [
                "value1",
                "value2"
              ]
            }
          },
          "raritySystem": {
            "description": "Rarity System to use when filtering for rarity",
            "enum": [
              "Hrtt",
              "Stat",
              "Team",
              "Tn"
            ],
            "type": "string"
          },
          "rarityMin": {
            "type": "number",
            "format": "float",
            "description": "Minimum rarity points to return in results",
            "minimum": 0
          },
          "rarityMax": {
            "type": "number",
            "format": "float",
            "description": "Maximum rarity points to return in results",
            "minimum": 0
          },
          "onlyInscriptions": {
            "type": "boolean",
            "description": "Filter to include only Solana Inscriptions"
          },
          "immutableStatus": {
            "description": "Filter the immutability of the Inscriptions",
            "enum": [
              "BOTH",
              "IMMUTABLE_ONLY",
              "MUTABLE_ONLY"
            ],
            "type": "string"
          },
          "encodedFilters": {
            "type": "string",
            "description": "Base64 encoded filters"
          }
        },
        "required": [
          "collId",
          "sortBy",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Record_string.any_": {
        "properties": {},
        "additionalProperties": {},
        "type": "object",
        "description": "Construct a type with a set of properties K of type T"
      },
      "GetCollectionSanitized": {
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "collId": {
            "type": "string"
          },
          "slugDisplay": {
            "type": "string",
            "nullable": true
          },
          "slugMe": {
            "type": "string",
            "nullable": true
          },
          "slugAtlas3": {
            "type": "string",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "teamId": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "imageUri": {
            "type": "string",
            "nullable": true
          },
          "tensorVerified": {
            "type": "boolean"
          },
          "tensorWhitelisted": {
            "type": "boolean"
          },
          "whitelistPda": {
            "type": "string",
            "nullable": true
          },
          "tokenStandard": {
            "allOf": [
              {
                "type": "string",
                "enum": [
                  "NON_FUNGIBLE",
                  "FUNGIBLE_ASSET",
                  "FUNGIBLE",
                  "NON_FUNGIBLE_EDITION",
                  "PROGRAMMABLE_NON_FUNGIBLE",
                  "PROGRAMMABLE_NON_FUNGIBLE_EDITION"
                ]
              }
            ],
            "nullable": true
          },
          "compressed": {
            "type": "boolean"
          },
          "inscription": {
            "type": "boolean"
          },
          "inscriptionMetaplex": {
            "type": "boolean"
          },
          "spl20": {
            "type": "boolean"
          },
          "sellRoyaltyFeeBPS": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stats": {
            "properties": {},
            "additionalProperties": {},
            "type": "object",
            "description": "Construct a type with a set of properties K of type T"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "firstListDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "collId",
          "slugDisplay",
          "slugMe",
          "slugAtlas3",
          "symbol",
          "description",
          "teamId",
          "website",
          "discord",
          "twitter",
          "imageUri",
          "tensorVerified",
          "tensorWhitelisted",
          "whitelistPda",
          "tokenStandard",
          "compressed",
          "inscription",
          "inscriptionMetaplex",
          "spl20",
          "sellRoyaltyFeeBPS",
          "stats",
          "createdAt",
          "updatedAt",
          "firstListDate"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetCollectionsResponse": {
        "properties": {
          "collections": {
            "items": {
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "collId": {
                  "type": "string"
                },
                "slugDisplay": {
                  "type": "string",
                  "nullable": true
                },
                "slugMe": {
                  "type": "string",
                  "nullable": true
                },
                "slugAtlas3": {
                  "type": "string",
                  "nullable": true
                },
                "symbol": {
                  "type": "string",
                  "nullable": true
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "teamId": {
                  "type": "string",
                  "nullable": true
                },
                "website": {
                  "type": "string",
                  "nullable": true
                },
                "discord": {
                  "type": "string",
                  "nullable": true
                },
                "twitter": {
                  "type": "string",
                  "nullable": true
                },
                "imageUri": {
                  "type": "string",
                  "nullable": true
                },
                "tensorVerified": {
                  "type": "boolean"
                },
                "tensorWhitelisted": {
                  "type": "boolean"
                },
                "whitelistPda": {
                  "type": "string",
                  "nullable": true
                },
                "tokenStandard": {
                  "allOf": [
                    {
                      "type": "string",
                      "enum": [
                        "NON_FUNGIBLE",
                        "FUNGIBLE_ASSET",
                        "FUNGIBLE",
                        "NON_FUNGIBLE_EDITION",
                        "PROGRAMMABLE_NON_FUNGIBLE",
                        "PROGRAMMABLE_NON_FUNGIBLE_EDITION"
                      ]
                    }
                  ],
                  "nullable": true
                },
                "compressed": {
                  "type": "boolean"
                },
                "inscription": {
                  "type": "boolean"
                },
                "inscriptionMetaplex": {
                  "type": "boolean"
                },
                "spl20": {
                  "type": "boolean"
                },
                "sellRoyaltyFeeBPS": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "stats": {
                  "properties": {},
                  "additionalProperties": {},
                  "type": "object",
                  "description": "Construct a type with a set of properties K of type T"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "firstListDate": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "name",
                "collId",
                "slugDisplay",
                "slugMe",
                "slugAtlas3",
                "symbol",
                "description",
                "teamId",
                "website",
                "discord",
                "twitter",
                "imageUri",
                "tensorVerified",
                "tensorWhitelisted",
                "whitelistPda",
                "tokenStandard",
                "compressed",
                "inscription",
                "inscriptionMetaplex",
                "spl20",
                "sellRoyaltyFeeBPS",
                "stats",
                "createdAt",
                "updatedAt",
                "firstListDate"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "type": "array"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "page": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "collections",
          "total",
          "page"
        ],
        "type": "object"
      },
      "CollectionsSortBy": {
        "enum": [
          "statsV2.volume1h:desc",
          "statsV2.volume1h:asc",
          "statsV2.volume24h:desc",
          "statsV2.volume24h:asc",
          "statsV2.volume7d:desc",
          "statsV2.volume7d:asc",
          "statsV2.volumeAll:desc",
          "statsV2.volumeAll:asc",
          "statsV2.numBids:desc",
          "statsV2.numBids:asc",
          "statsV2.numListed:desc",
          "statsV2.numListed:asc",
          "createdAt:asc",
          "createdAt:desc",
          "slugDisplay:asc",
          "slugDisplay:desc"
        ],
        "type": "string"
      },
      "GetCollectionsQueryParams": {
        "properties": {
          "sortBy": {
            "description": "The order in which collections are returned",
            "enum": [
              "statsV2.volume1h:desc",
              "statsV2.volume1h:asc",
              "statsV2.volume24h:desc",
              "statsV2.volume24h:asc",
              "statsV2.volume7d:desc",
              "statsV2.volume7d:asc",
              "statsV2.volumeAll:desc",
              "statsV2.volumeAll:asc",
              "statsV2.numBids:desc",
              "statsV2.numBids:asc",
              "statsV2.numListed:desc",
              "statsV2.numListed:asc",
              "createdAt:asc",
              "createdAt:desc",
              "slugDisplay:asc",
              "slugDisplay:desc"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of collections returned in the response",
            "minimum": 1,
            "maximum": 100
          },
          "slugDisplays": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Slugs used in tensor.trade/trade/<slugDisplays> urls"
          },
          "collIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Collection IDs to filter by"
          },
          "vocs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Verified on-chain collection mints to filter by (max 10 vocs/fvcs)"
          },
          "fvcs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "First verified creators to filter by (max 10 vocs/fvcs)"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "The page number of the response",
            "minimum": 1
          }
        },
        "required": [
          "sortBy",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetCollectionQueryParams": {
        "properties": {
          "filter": {
            "type": "string",
            "description": "Enter slugDisplay, or slug, or collId, or voc, or fvc"
          }
        },
        "required": [
          "filter"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SearchCollectionsQueryParams": {
        "properties": {
          "query": {
            "type": "string",
            "description": "Search input - eg partial collection name"
          },
          "sortBy": {
            "description": "The order in which collections are returned",
            "enum": [
              "statsV2.volume1h:desc",
              "statsV2.volume1h:asc",
              "statsV2.volume24h:desc",
              "statsV2.volume24h:asc",
              "statsV2.volume7d:desc",
              "statsV2.volume7d:asc",
              "statsV2.volumeAll:desc",
              "statsV2.volumeAll:asc",
              "statsV2.numBids:desc",
              "statsV2.numBids:asc",
              "statsV2.numListed:desc",
              "statsV2.numListed:asc",
              "createdAt:asc",
              "createdAt:desc",
              "slugDisplay:asc",
              "slugDisplay:desc"
            ],
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of collections to return in the reponse",
            "minimum": 1,
            "maximum": 20
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "The page number of the response",
            "minimum": 1
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "GetCollectionByNFTSanitized": {
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "tokenStandard": {
            "type": "string",
            "nullable": true
          },
          "compressed": {
            "type": "boolean"
          },
          "verifiedCollection": {
            "type": "string",
            "nullable": true
          },
          "inscription": {
            "type": "string",
            "nullable": true
          },
          "spl20": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "id",
          "compressed"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetMintCollectionsQueryParams": {
        "properties": {
          "mints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The mint addresses to fetch collections for"
          }
        },
        "required": [
          "mints"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetMintsQueryParams": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID of the mints."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The limit of the mint.",
            "minimum": 1,
            "maximum": 1000
          },
          "after": {
            "type": "string",
            "description": "The after of the mint."
          }
        },
        "required": [
          "collId",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CollIdQueryParams": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID"
          }
        },
        "required": [
          "collId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetNFTBidsQueryParams": {
        "properties": {
          "mints": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The mint address of the NFT"
          }
        },
        "required": [
          "mints"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetCollBidsQueryParams": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of active bids to return in the response",
            "minimum": 1,
            "maximum": 100
          },
          "cursor": {
            "type": "string",
            "description": "The cursor returned from the previous response"
          }
        },
        "required": [
          "collId",
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GetCollTxHistoryQueryParams": {
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of transactions to return in the reponse",
            "minimum": 1,
            "maximum": 100
          },
          "collId": {
            "type": "string",
            "description": "The collection ID"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor returned from the previous response"
          },
          "txTypes": {
            "items": {
              "enum": [
                "LIST",
                "DELIST",
                "ADJUST_PRICE",
                "PLACE_BID",
                "CANCEL_BID",
                "SALE_BUY_NOW",
                "SALE_ACCEPT_BID",
                "TRANSFER",
                "FAILED",
                "OTHER",
                "AUCTION_CREATE",
                "AUCTION_PLACE_BID",
                "AUCTION_SETTLE",
                "AUCTION_CANCEL",
                "CREATE_MINT",
                "UPDATE_MINT",
                "SWAP_INIT_POOL",
                "SWAP_CLOSE_POOL",
                "SWAP_EDIT_POOL",
                "SWAP_DEPOSIT_NFT",
                "SWAP_DEPOSIT_SOL",
                "SWAP_BUY_NFT",
                "SWAP_SELL_NFT",
                "SWAP_WITHDRAW_NFT",
                "SWAP_WITHDRAW_SOL",
                "SWAP_WITHDRAW_MM_FEE",
                "SWAP_EDIT_SINGLE_LISTING",
                "SWAP_DEPOSIT_LIQ",
                "SWAP_WITHDRAW_LIQ",
                "ELIXIR_APPRAISE",
                "ELIXIR_FRACTIONALIZE",
                "ELIXIR_FUSE",
                "ELIXIR_POOL_DEPOSIT_FNFT",
                "ELIXIR_POOL_WITHDRAW_FNFT",
                "ELIXIR_POOL_EXCHANGE_FNFT",
                "ELIXIR_SELL_PNFT",
                "ELIXIR_BUY_PNFT",
                "ELIXIR_COMPOSED_BUY_NFT",
                "ELIXIR_COMPOSED_SELL_NFT",
                "MARGIN_INIT",
                "MARGIN_DEPOSIT",
                "MARGIN_WITHDRAW",
                "MARGIN_CLOSE",
                "MARGIN_ATTACH",
                "MARGIN_DETACH",
                "SWAP_LIST",
                "SWAP_DELIST",
                "SWAP_BUY_SINGLE_LISTING",
                "OTC_BUNDLED_MAKE_OFFER",
                "OTC_BUNDLED_TAKE_OFFER",
                "OTC_BUNDLED_TAKER_WITHDRAW",
                "OTC_BUNDLED_MAKER_WITHDRAW",
                "STAKE",
                "UNSTAKE",
                "ROLL_COMMIT",
                "ROLL_FULFILL_NONE",
                "ROLL_FULFILL_REWARD",
                "ROLL_FULFILL_SOL",
                "LOCK_UPSERT_ORDER",
                "LOCK_LOCK_ORDER",
                "LOCK_CLOSE_ORDER",
                "LOCK_WITHDRAW_NFT",
                "LOCK_DEPOSIT_NFT",
                "LOCK_WITHDRAW_COLLATERAL",
                "LOCK_CLAIM_TOKENS",
                "LOCK_CLAIM_NFT",
                "LOCK_ORDER_SELL_NFT",
                "LOCK_ORDER_BUY_NFT",
                "LOCK_MARKET_SELL_NFT",
                "LOCK_MARKET_BUY_NFT"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The transaction types to include in the response"
          },
          "sources": {
            "items": {
              "enum": [
                "ONCHAIN",
                "MAGICEDEN",
                "MAGICEDEN_V2",
                "MAGICEDEN_AUCTION",
                "SMB",
                "SMB_V2",
                "SOLANART",
                "SOLSEA",
                "ALPHA",
                "DIGITALEYEZ",
                "DIGITALEYEZ_V2",
                "AUCTION_HOUSE",
                "HYPERSPACE",
                "YAWWW",
                "TOKEN_METADATA",
                "TENSORSWAP",
                "TENSORBID",
                "TCOMP",
                "HADESWAP",
                "ELIXIR",
                "ELIXIR_COMPOSED",
                "BUBBLEGUM",
                "SWAPSORIAN",
                "TSTAKE",
                "TROLL",
                "SPL_TOKEN",
                "TOKEN22_TOKEN",
                "MPL_CORE",
                "TGARD",
                "TLOCK"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "Sources to aggregate transactions from"
          },
          "minPrice": {
            "type": "number",
            "format": "float",
            "description": "The minimum price to filter for",
            "minimum": 0
          },
          "maxPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price to filter for",
            "minimum": 0
          },
          "traits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Traits and values to filter for\nFormat must match the following JSON string: `{\"trait_type\": [\"value1\", \"value2\"]}`",
            "example": {
              "trait_type": [
                "value1",
                "value2"
              ]
            }
          },
          "traitCountMin": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum number of traits to filter for",
            "minimum": 0
          },
          "traitCountMax": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of traits to filter for",
            "minimum": 1
          },
          "includeCurrencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Currencies to include in results"
          },
          "wallet": {
            "type": "string",
            "description": "Wallet address to filter transactions by"
          }
        },
        "required": [
          "limit"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OnchainTx": {
        "properties": {
          "tx": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "txV0": {
            "type": "string",
            "format": "byte"
          },
          "lastValidBlockHeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "metadata": {
            "additionalProperties": false,
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "txV0"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TxResponse": {
        "properties": {
          "txs": {
            "items": {
              "properties": {
                "tx": {
                  "type": "string",
                  "format": "byte",
                  "nullable": true
                },
                "txV0": {
                  "type": "string",
                  "format": "byte"
                },
                "lastValidBlockHeight": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "metadata": {
                  "additionalProperties": false,
                  "type": "object",
                  "nullable": true
                }
              },
              "required": [
                "txV0"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "type": "array"
          }
        },
        "required": [
          "txs"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TxResponseRest": {
        "allOf": [
          {
            "properties": {
              "txs": {
                "items": {
                  "properties": {
                    "tx": {
                      "type": "string",
                      "format": "byte",
                      "nullable": true
                    },
                    "txV0": {
                      "type": "string",
                      "format": "byte"
                    },
                    "lastValidBlockHeight": {
                      "type": "number",
                      "format": "double",
                      "nullable": true
                    },
                    "metadata": {
                      "additionalProperties": false,
                      "type": "object",
                      "nullable": true
                    }
                  },
                  "required": [
                    "txV0"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "type": "array"
              }
            },
            "required": [
              "txs"
            ],
            "type": "object",
            "additionalProperties": false
          },
          {
            "properties": {
              "totalCost": {
                "type": "number",
                "format": "double",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "TswapExchangeNftTxQueryParams": {
        "properties": {
          "poolAddress": {
            "type": "string",
            "description": "The address of the swap pool"
          },
          "taker": {
            "type": "string",
            "description": "The taker of the NFT"
          },
          "mintToSell": {
            "type": "string",
            "description": "The mint address to sell to the taker"
          },
          "mintToBuy": {
            "type": "string",
            "description": "The mint address to buy"
          },
          "minPriceLamports": {
            "type": "number",
            "format": "float",
            "description": "The minimum price that would be paid for the NFT",
            "minimum": 0
          },
          "maxPriceLamports": {
            "type": "number",
            "format": "float",
            "description": "The maximum price that would be paid for the NFT",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "poolAddress",
          "taker",
          "mintToSell",
          "mintToBuy",
          "minPriceLamports",
          "maxPriceLamports",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PoolType": {
        "enum": [
          "TOKEN",
          "NFT",
          "TRADE"
        ],
        "type": "string"
      },
      "CurveType": {
        "enum": [
          "LINEAR",
          "EXPONENTIAL",
          "XYK"
        ],
        "type": "string"
      },
      "TswapCreatePoolTxQueryParams": {
        "properties": {
          "collId": {
            "type": "string",
            "description": "The collection ID of the TSwap pool"
          },
          "owner": {
            "type": "string",
            "description": "The current owner of the NFT"
          },
          "poolType": {
            "description": "The type of Pool to create",
            "enum": [
              "TOKEN",
              "NFT",
              "TRADE"
            ],
            "type": "string"
          },
          "curveType": {
            "description": "The type of curve to use for the pool",
            "enum": [
              "LINEAR",
              "EXPONENTIAL",
              "XYK"
            ],
            "type": "string"
          },
          "startingPrice": {
            "type": "number",
            "format": "float",
            "description": "The starting price of the listing",
            "minimum": 0
          },
          "delta": {
            "type": "number",
            "format": "float",
            "description": "The increase after each sale",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to be passed into the transaction"
          },
          "makerBroker": {
            "type": "string",
            "description": "The maker broker for getting fee rebates"
          },
          "useSharedEscrow": {
            "type": "boolean",
            "description": "Use Shared Escrow"
          },
          "mmKeepFeesSeparate": {
            "type": "boolean",
            "description": "Allows you to buy NFTs using market maker fees"
          },
          "mmFeeBps": {
            "type": "number",
            "format": "double",
            "description": "Market making fee in basis points",
            "minimum": 0
          },
          "depositLamports": {
            "type": "number",
            "format": "float",
            "description": "Initial deposit to add in"
          },
          "maxTakerSellCount": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of bids that can be accepted by the pool"
          },
          "mintForProof": {
            "type": "string",
            "description": "optional mint for which to init/update proof. Useful when creating a LIST pool with a single mint, to combine 2 txs (init pool & init proof) into one."
          },
          "topUpMargin": {
            "type": "boolean",
            "description": "Tops up margin with missing amount so it has enough to fill the bid"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "The priority in micro-lamports to be used for the transaction",
            "minimum": 0
          }
        },
        "required": [
          "collId",
          "owner",
          "poolType",
          "curveType",
          "startingPrice",
          "delta",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TswapClosePoolTxQueryParams": {
        "properties": {
          "poolAddress": {
            "type": "string",
            "description": "The address of the swap pool"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to be used for the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "The priority micro lamports to be used for the transaction",
            "minimum": 0
          }
        },
        "required": [
          "poolAddress",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TswapEditPoolTxQueryParams": {
        "properties": {
          "poolAddress": {
            "type": "string",
            "description": "The address of the swap pool"
          },
          "poolType": {
            "description": "The type of Pool to create",
            "enum": [
              "TOKEN",
              "NFT",
              "TRADE"
            ],
            "type": "string"
          },
          "curveType": {
            "description": "The type of curve to use for the pool",
            "enum": [
              "LINEAR",
              "EXPONENTIAL",
              "XYK"
            ],
            "type": "string"
          },
          "startingPrice": {
            "type": "number",
            "format": "float",
            "description": "The starting price of the listing",
            "minimum": 0
          },
          "delta": {
            "type": "number",
            "format": "float",
            "description": "The increase after each sale",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to be used for the transaction"
          },
          "mmKeepFeesSeparate": {
            "type": "boolean",
            "description": "Allows you to buy NFTs using market maker fees"
          },
          "mmFeeBps": {
            "type": "number",
            "format": "double",
            "description": "Market making fee in basis points"
          },
          "maxTakerSellCount": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of bids that can be accepted by the pool"
          },
          "useSharedEscrow": {
            "type": "boolean",
            "description": "Use Shared Escrow"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "The priority micro lamports to be used for the transaction",
            "minimum": 0
          }
        },
        "required": [
          "poolAddress",
          "poolType",
          "curveType",
          "startingPrice",
          "delta",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DepositWithdrawAction": {
        "enum": [
          "DEPOSIT",
          "WITHDRAW"
        ],
        "type": "string"
      },
      "TswapDepositWithdrawTxQueryParams": {
        "properties": {
          "action": {
            "description": "The action to perform. Either \"DEPOSIT\" or \"WITHDRAW\"",
            "enum": [
              "DEPOSIT",
              "WITHDRAW"
            ],
            "type": "string"
          },
          "poolAddress": {
            "type": "string",
            "description": "The address of the swap pool"
          },
          "mint": {
            "type": "string",
            "description": "The address of the mint"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to be passed into the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "The priority in micro-lamports to be used for the transaction",
            "minimum": 0
          },
          "nftSource": {
            "type": "string",
            "description": "NFT source"
          }
        },
        "required": [
          "action",
          "poolAddress",
          "mint",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TswapDepositWithdrawSolTxQueryParams": {
        "properties": {
          "action": {
            "description": "The action to perform. Either \"deposit\" or \"withdraw\"",
            "enum": [
              "DEPOSIT",
              "WITHDRAW"
            ],
            "type": "string"
          },
          "poolAddress": {
            "type": "string",
            "description": "The address of the swap pool"
          },
          "lamports": {
            "type": "number",
            "format": "float",
            "description": "The amount of SOL to deposit/withdraw",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to be passed into the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "The priority in micro-lamports to be used for the transaction",
            "minimum": 0
          }
        },
        "required": [
          "action",
          "poolAddress",
          "lamports",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BuyTxQueryParams": {
        "properties": {
          "buyer": {
            "type": "string",
            "description": "The buyer of the NFT"
          },
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "owner": {
            "type": "string",
            "description": "The current owner of the NFT"
          },
          "maxPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price that would be paid for the NFT",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "includeTotalCost": {
            "type": "boolean",
            "description": "Include the total cost of the transaction including royalties and fees"
          },
          "payer": {
            "type": "string",
            "description": "The address that pays the NFT (if different from buyer)"
          },
          "feePayer": {
            "type": "string",
            "description": "The transaction fee payer (if different from buyer)"
          },
          "optionalRoyaltyPct": {
            "type": "integer",
            "format": "int32",
            "description": "The optional royalty percent to pay to the creator",
            "minimum": 0,
            "maximum": 100
          },
          "currency": {
            "type": "string",
            "description": "The currency to purchase the NFT\nDefault value is SOL"
          },
          "takerBroker": {
            "type": "string",
            "description": "The Taker broker of the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "buyer",
          "mint",
          "owner",
          "maxPrice",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SellTxQueryParams": {
        "properties": {
          "seller": {
            "type": "string",
            "description": "The seller of the NFT"
          },
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "bidAddress": {
            "type": "string",
            "description": "The address of the bid (eg: bid state account or pool address)"
          },
          "minPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price that would be paid for the NFT",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "takerBroker": {
            "type": "string",
            "description": "The taker broker for getting fee rebates"
          },
          "feePayer": {
            "type": "string",
            "description": "The transaction fee payer (if different from seller)"
          },
          "optionalRoyaltyPct": {
            "type": "integer",
            "format": "int32",
            "description": "The optional royalty percent to pay to the creator",
            "minimum": 0,
            "maximum": 100
          },
          "currency": {
            "type": "string",
            "description": "The currency to purchase the NFT in\nDefault value is SOL"
          },
          "delegateSigner": {
            "type": "boolean",
            "description": "Is a delegate signer being used?"
          },
          "includeProof": {
            "type": "boolean",
            "description": "Should a mint proof transaction be returned as well if necessary?\nDefault value is true"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "seller",
          "mint",
          "bidAddress",
          "minPrice",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ListTxQueryParams": {
        "properties": {
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "owner": {
            "type": "string",
            "description": "The current owner of the NFT"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price that the NFT is listed for",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "makerBroker": {
            "type": "string",
            "description": "The maker broker for getting fee rebates"
          },
          "payer": {
            "type": "string",
            "description": "The address that pays the NFT (if different from buyer)"
          },
          "feePayer": {
            "type": "string",
            "description": "The transaction fee payer (if different from buyer)"
          },
          "rentPayer": {
            "type": "string",
            "description": "The address that pays for the account rent (if different from bidder)"
          },
          "currency": {
            "type": "string",
            "description": "The currency to purchase the NFT in\nDefault value is SOL"
          },
          "expireIn": {
            "type": "integer",
            "format": "int32",
            "description": "Time until the listing expires in ms",
            "minimum": 0
          },
          "privateTaker": {
            "type": "string",
            "description": "The private taker of the transaction"
          },
          "delegateSigner": {
            "type": "boolean",
            "description": "Is a delegate signer being used?"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "mint",
          "owner",
          "price",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DelistTxQueryParams": {
        "properties": {
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "owner": {
            "type": "string",
            "description": "The current owner of the NFT"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "feePayer": {
            "type": "string",
            "description": "The transaction fee payer (if different from buyer)"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "mint",
          "owner",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "EditTxQueryParams": {
        "properties": {
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "owner": {
            "type": "string",
            "description": "The current owner of the NFT"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price that the NFT is listed for",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "expireIn": {
            "type": "integer",
            "format": "int32",
            "description": "Time until the listing expires in ms (cNFT Only)",
            "minimum": 0
          },
          "feePayer": {
            "type": "string",
            "description": "The transaction fee payer if different from buyer (cNFT Only)"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "mint",
          "owner",
          "price",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BidResponse": {
        "properties": {
          "txs": {
            "items": {
              "properties": {
                "tx": {
                  "type": "string",
                  "format": "byte",
                  "nullable": true
                },
                "txV0": {
                  "type": "string",
                  "format": "byte"
                },
                "lastValidBlockHeight": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "metadata": {
                  "additionalProperties": false,
                  "type": "object",
                  "nullable": true
                }
              },
              "required": [
                "txV0"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "type": "array"
          },
          "bidState": {
            "type": "string"
          }
        },
        "required": [
          "txs",
          "bidState"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SingleBidTxQueryParams": {
        "properties": {
          "owner": {
            "type": "string",
            "description": "The placer of the bid"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price to bid on the NFT",
            "minimum": 0
          },
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "makerBroker": {
            "type": "string",
            "description": "The maker broker for getting fee rebates"
          },
          "useSharedEscrow": {
            "type": "boolean",
            "description": "Use Shared Escrow"
          },
          "rentPayer": {
            "type": "string",
            "description": "The address that pays for the account rent (if different from bidder)"
          },
          "expireIn": {
            "type": "integer",
            "format": "int32",
            "description": "Time until the bid expires in ms",
            "minimum": 0
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "owner",
          "price",
          "mint",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TraitBidTxQueryParams": {
        "properties": {
          "owner": {
            "type": "string",
            "description": "The placer of the bid"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price to bid on the NFTs",
            "minimum": 0
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of NFTs to bid on",
            "minimum": 1
          },
          "collId": {
            "type": "string",
            "description": "The collection ID to place the bid on"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "makerBroker": {
            "type": "string",
            "description": "The maker broker for getting fee rebates"
          },
          "traits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Traits and values to bid on\nFormat must match the following JSON string: `{\"trait_type\": \"value\"}`",
            "example": {
              "trait_type": "value"
            }
          },
          "useSharedEscrow": {
            "type": "boolean",
            "description": "Use Shared Escrow"
          },
          "rentPayer": {
            "type": "string",
            "description": "The address that pays for the account rent (if different from bidder)"
          },
          "expireIn": {
            "type": "integer",
            "format": "int32",
            "description": "Time until the bid expires in ms",
            "minimum": 0
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "owner",
          "price",
          "quantity",
          "collId",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CollectionBidTxQueryParams": {
        "properties": {
          "owner": {
            "type": "string",
            "description": "The placer of the bid"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price to bid on the NFTs",
            "minimum": 0
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of NFTs to bid on",
            "minimum": 1
          },
          "collId": {
            "type": "string",
            "description": "The collection ID to place the bid on"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "makerBroker": {
            "type": "string",
            "description": "The maker broker for getting fee rebates"
          },
          "useSharedEscrow": {
            "type": "boolean",
            "description": "Use Shared Escrow"
          },
          "rentPayer": {
            "type": "string",
            "description": "The address that pays for the account rent (if different from bidder)"
          },
          "expireIn": {
            "type": "integer",
            "format": "int32",
            "description": "Time until the bid expires in ms",
            "minimum": 0
          },
          "topUp": {
            "type": "number",
            "format": "float",
            "description": "Amount of SOL to top up at the same time",
            "minimum": 0
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "owner",
          "price",
          "quantity",
          "collId",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TxBidResponseRest": {
        "properties": {
          "txs": {
            "items": {
              "properties": {
                "tx": {
                  "type": "string",
                  "format": "byte",
                  "nullable": true
                },
                "txV0": {
                  "type": "string",
                  "format": "byte"
                },
                "lastValidBlockHeight": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                },
                "metadata": {
                  "additionalProperties": false,
                  "type": "object",
                  "nullable": true
                }
              },
              "required": [
                "txV0"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "type": "array"
          },
          "bidState": {
            "type": "string"
          }
        },
        "required": [
          "txs",
          "bidState"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "EditBidTx": {
        "properties": {
          "bidStateAddress": {
            "type": "string",
            "description": "The bid state address"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The new price of the Bid",
            "minimum": 0
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of NFTs to bid on",
            "minimum": 1
          },
          "expireIn": {
            "type": "integer",
            "format": "int32",
            "description": "Time until the bid expires in ms",
            "minimum": 0
          },
          "privateTaker": {
            "type": "string",
            "description": "The private taker of the transaction"
          },
          "useSharedEscrow": {
            "type": "boolean",
            "description": "Use Shared Escrow"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "bidStateAddress",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CancelCollBidTxQueryParams": {
        "properties": {
          "bidStateAddress": {
            "type": "string",
            "description": "The bid state address"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction",
            "minimum": 0
          }
        },
        "required": [
          "bidStateAddress",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DepositWithdrawEscrowTxQueryParams": {
        "properties": {
          "action": {
            "description": "The action to perform. Either \"deposit\" or \"withdraw\"",
            "enum": [
              "DEPOSIT",
              "WITHDRAW"
            ],
            "type": "string"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the Margin account"
          },
          "lamports": {
            "type": "number",
            "format": "float",
            "description": "The amount of SOL to deposit/withdraw"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to be passed into the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction",
            "minimum": 0
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "The priority in micro-lamports to be used for the transaction",
            "minimum": 0
          }
        },
        "required": [
          "action",
          "owner",
          "lamports",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockCreateOrderTxQueryParams": {
        "properties": {
          "maker": {
            "type": "string",
            "description": "The address of the lock maker"
          },
          "collId": {
            "type": "string",
            "description": "The collection ID to place the order on"
          },
          "orderType": {
            "description": "The type of order",
            "enum": [
              "TOKEN",
              "NFT"
            ],
            "type": "string"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The strike price of the Lock",
            "minimum": 0
          },
          "makerBroker": {
            "type": "string",
            "description": "The maker broker for getting fee rebates"
          },
          "depositMint": {
            "type": "string",
            "description": "The mint of the NFT to deposit"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "maker",
          "collId",
          "orderType",
          "blockhash",
          "price"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockUpdateOrderTxQueryParams": {
        "properties": {
          "maker": {
            "type": "string",
            "description": "The address of the lock supplier"
          },
          "collId": {
            "type": "string",
            "description": "The collection ID to place the order on"
          },
          "orderType": {
            "description": "The type of order (either \"NFT\" or \"TOKEN\")",
            "enum": [
              "TOKEN",
              "NFT"
            ],
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The new price of the Lock",
            "minimum": 0
          },
          "orderState": {
            "type": "string",
            "description": "The orderState to edit"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "depositMint": {
            "type": "string",
            "description": "The mint of the NFT to deposit"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "maker",
          "collId",
          "orderType",
          "price",
          "orderState",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockCloseTxQueryParams": {
        "properties": {
          "orderState": {
            "type": "string",
            "description": "The order state address of the lock"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "orderState",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockDepositWithdrawNftQueryParams": {
        "properties": {
          "action": {
            "description": "The action to perform",
            "enum": [
              "DEPOSIT",
              "WITHDRAW"
            ],
            "type": "string"
          },
          "orderState": {
            "type": "string",
            "description": "The order state address of the lock"
          },
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "action",
          "orderState",
          "mint",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockLockTxQueryParams": {
        "properties": {
          "taker": {
            "type": "string",
            "description": "The taker of the lock"
          },
          "orderState": {
            "type": "string",
            "description": "The order state address of the lock"
          },
          "nonce": {
            "type": "number",
            "format": "double",
            "description": "Current nonce on the otder"
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price of the lock",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "takerBroker": {
            "type": "string",
            "description": "The taker broker for getting fee rebates"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "taker",
          "orderState",
          "nonce",
          "price",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockClaimAction": {
        "enum": [
          "CLAIM_NFT",
          "CLAIM_TOKENS"
        ],
        "type": "string"
      },
      "TLockClaimTxQueryParams": {
        "properties": {
          "orderState": {
            "type": "string",
            "description": "The order state address of the lock"
          },
          "mint": {
            "type": "string",
            "description": "The mint of the NFT being claimed"
          },
          "action": {
            "description": "The action to perform on the order. Either \"CLAIM_NFT\" or \"CLAIM_TOKENS\"",
            "enum": [
              "CLAIM_NFT",
              "CLAIM_TOKENS"
            ],
            "type": "string"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "orderState",
          "mint",
          "action",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockTakeProfitBuyNftQueryParams": {
        "properties": {
          "orderState": {
            "type": "string",
            "description": "The order state address of the lock"
          },
          "maxPrice": {
            "type": "number",
            "format": "float",
            "description": "The maximum price to pay for the NFT",
            "minimum": 0
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "takerBroker": {
            "type": "string",
            "description": "The taker broker for getting fee rebates"
          },
          "passedMint": {
            "type": "string",
            "description": "The passed mint of the NFT"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "orderState",
          "maxPrice",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TLockTakeProfitSellNftQueryParams": {
        "properties": {
          "orderState": {
            "type": "string",
            "description": "The order state address of the lock"
          },
          "minPrice": {
            "type": "number",
            "format": "float",
            "description": "The minimum price to sell the NFT"
          },
          "mint": {
            "type": "string",
            "description": "The mint of the NFT"
          },
          "blockhash": {
            "type": "string",
            "description": "The blockhash to use for the transaction"
          },
          "takerBroker": {
            "type": "string",
            "description": "The taker broker for getting fee rebates"
          },
          "bestBidOrder": {
            "type": "string",
            "description": "The best bid order address"
          },
          "compute": {
            "type": "integer",
            "format": "int32",
            "description": "Compute units for the transaction"
          },
          "priorityMicroLamports": {
            "type": "integer",
            "format": "int32",
            "description": "Priority fee to assign to the transaction"
          }
        },
        "required": [
          "orderState",
          "minPrice",
          "mint",
          "blockhash"
        ],
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-tensor-api-key",
        "in": "header"
      }
    }
  },
  "info": {
    "title": "Trading API",
    "version": "1.0.0",
    "contact": {}
  },
  "paths": {
    "/tx/tswap/create_order": {
      "get": {
        "operationId": "TswapCreateOrderTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to open an AMM pool",
        "summary": "Create AMM Pool",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The collection ID of the TSwap pool",
            "in": "query",
            "name": "collId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current owner of the NFT",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of Pool to create",
            "in": "query",
            "name": "poolType",
            "required": true,
            "schema": {
              "enum": [
                "TOKEN",
                "NFT",
                "TRADE"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of curve to use for the pool",
            "in": "query",
            "name": "curveType",
            "required": true,
            "schema": {
              "enum": [
                "LINEAR",
                "EXPONENTIAL",
                "XYK"
              ],
              "type": "string"
            }
          },
          {
            "description": "The starting price of the listing",
            "in": "query",
            "name": "startingPrice",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The increase after each sale",
            "in": "query",
            "name": "delta",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to be passed into the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maker broker for getting fee rebates",
            "in": "query",
            "name": "makerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use Shared Escrow",
            "in": "query",
            "name": "useSharedEscrow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allows you to buy NFTs using market maker fees",
            "in": "query",
            "name": "mmKeepFeesSeparate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Market making fee in basis points",
            "in": "query",
            "name": "mmFeeBps",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "Initial deposit to add in",
            "in": "query",
            "name": "depositLamports",
            "required": false,
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "Maximum number of bids that can be accepted by the pool",
            "in": "query",
            "name": "maxTakerSellCount",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "optional mint for which to init/update proof. Useful when creating a LIST pool with a single mint, to combine 2 txs (init pool & init proof) into one.",
            "in": "query",
            "name": "mintForProof",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tops up margin with missing amount so it has enough to fill the bid",
            "in": "query",
            "name": "topUpMargin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The priority in micro-lamports to be used for the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "AMM"
        ]
      }
    },
    "/tx/tswap/close_order": {
      "get": {
        "operationId": "TswapClosePoolTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to close an AMM pool",
        "summary": "Close AMM Pool",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The address of the swap pool",
            "in": "query",
            "name": "poolAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to be used for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The priority micro lamports to be used for the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "AMM"
        ]
      }
    },
    "/tx/tswap/edit_order": {
      "get": {
        "operationId": "TswapEditPoolTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to edit an AMM pool",
        "summary": "Edit AMM Pool",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The address of the swap pool",
            "in": "query",
            "name": "poolAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of Pool to create",
            "in": "query",
            "name": "poolType",
            "required": true,
            "schema": {
              "enum": [
                "TOKEN",
                "NFT",
                "TRADE"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of curve to use for the pool",
            "in": "query",
            "name": "curveType",
            "required": true,
            "schema": {
              "enum": [
                "LINEAR",
                "EXPONENTIAL",
                "XYK"
              ],
              "type": "string"
            }
          },
          {
            "description": "The starting price of the listing",
            "in": "query",
            "name": "startingPrice",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The increase after each sale",
            "in": "query",
            "name": "delta",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to be used for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Allows you to buy NFTs using market maker fees",
            "in": "query",
            "name": "mmKeepFeesSeparate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Market making fee in basis points",
            "in": "query",
            "name": "mmFeeBps",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Maximum number of bids that can be accepted by the pool",
            "in": "query",
            "name": "maxTakerSellCount",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Use Shared Escrow",
            "in": "query",
            "name": "useSharedEscrow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The priority micro lamports to be used for the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "AMM"
        ]
      }
    },
    "/tx/tswap/deposit_withdraw": {
      "get": {
        "operationId": "CreateTswapDepositWithdrawTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to Deposit/Withdraw an NFT to/from an AMM pool",
        "summary": "Deposit/Withdraw NFT",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The action to perform. Either \"DEPOSIT\" or \"WITHDRAW\"",
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "DEPOSIT",
                "WITHDRAW"
              ],
              "type": "string"
            }
          },
          {
            "description": "The address of the swap pool",
            "in": "query",
            "name": "poolAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The address of the mint",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to be passed into the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The priority in micro-lamports to be used for the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "NFT source",
            "in": "query",
            "name": "nftSource",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AMM"
        ]
      }
    },
    "/tx/tswap/deposit_withdraw_sol": {
      "get": {
        "operationId": "TswapDepositWithdrawSolTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to Deposit/Withdraw SOL to/from an AMM pool",
        "summary": "Deposit/Withdraw SOL",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The action to perform. Either \"deposit\" or \"withdraw\"",
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "DEPOSIT",
                "WITHDRAW"
              ],
              "type": "string"
            }
          },
          {
            "description": "The address of the swap pool",
            "in": "query",
            "name": "poolAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of SOL to deposit/withdraw",
            "in": "query",
            "name": "lamports",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to be passed into the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The priority in micro-lamports to be used for the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "AMM"
        ]
      }
    },
    "/tx/buy": {
      "get": {
        "operationId": "BuyTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to purchase an NFT",
        "summary": "NFT Buy",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The buyer of the NFT",
            "in": "query",
            "name": "buyer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The mint of the NFT",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current owner of the NFT",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum price that would be paid for the NFT",
            "in": "query",
            "name": "maxPrice",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include the total cost of the transaction including royalties and fees",
            "in": "query",
            "name": "includeTotalCost",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The address that pays the NFT (if different from buyer)",
            "in": "query",
            "name": "payer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The transaction fee payer (if different from buyer)",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The optional royalty percent to pay to the creator",
            "in": "query",
            "name": "optionalRoyaltyPct",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "description": "The currency to purchase the NFT\nDefault value is SOL",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Taker broker of the transaction",
            "in": "query",
            "name": "takerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/sell": {
      "get": {
        "operationId": "SellTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to accept a bid on an NFT",
        "summary": "NFT Sell",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The seller of the NFT",
            "in": "query",
            "name": "seller",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The mint of the NFT",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The address of the bid (eg: bid state account or pool address)",
            "in": "query",
            "name": "bidAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum price that would be paid for the NFT",
            "in": "query",
            "name": "minPrice",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The taker broker for getting fee rebates",
            "in": "query",
            "name": "takerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The transaction fee payer (if different from seller)",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The optional royalty percent to pay to the creator",
            "in": "query",
            "name": "optionalRoyaltyPct",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "description": "The currency to purchase the NFT in\nDefault value is SOL",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is a delegate signer being used?",
            "in": "query",
            "name": "delegateSigner",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Should a mint proof transaction be returned as well if necessary?\nDefault value is true",
            "in": "query",
            "name": "includeProof",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/list": {
      "get": {
        "operationId": "ListTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to list an NFT",
        "summary": "NFT List",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The mint of the NFT",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current owner of the NFT",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The price that the NFT is listed for",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maker broker for getting fee rebates",
            "in": "query",
            "name": "makerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The address that pays the NFT (if different from buyer)",
            "in": "query",
            "name": "payer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The transaction fee payer (if different from buyer)",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The address that pays for the account rent (if different from bidder)",
            "in": "query",
            "name": "rentPayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The currency to purchase the NFT in\nDefault value is SOL",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Time until the listing expires in ms",
            "in": "query",
            "name": "expireIn",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The private taker of the transaction",
            "in": "query",
            "name": "privateTaker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Is a delegate signer being used?",
            "in": "query",
            "name": "delegateSigner",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/delist": {
      "get": {
        "operationId": "DelistTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to delist an NFT",
        "summary": "NFT Delist",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The mint of the NFT",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current owner of the NFT",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The transaction fee payer (if different from buyer)",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/edit": {
      "get": {
        "operationId": "EditListingTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "txs"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    },
                    {
                      "properties": {
                        "totalCost": {
                          "type": "number",
                          "format": "double",
                          "nullable": true
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to edit an NFT listing",
        "summary": "Edit Listing",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The mint of the NFT",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current owner of the NFT",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The price that the NFT is listed for",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Time until the listing expires in ms (cNFT Only)",
            "in": "query",
            "name": "expireIn",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The transaction fee payer if different from buyer (cNFT Only)",
            "in": "query",
            "name": "feePayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/bid": {
      "get": {
        "operationId": "SingleBidTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "bidState": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "txs",
                        "bidState"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to place a bid on a single NFT",
        "summary": "Place NFT Bid",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The placer of the bid",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The price to bid on the NFT",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The mint of the NFT",
            "in": "query",
            "name": "mint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maker broker for getting fee rebates",
            "in": "query",
            "name": "makerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use Shared Escrow",
            "in": "query",
            "name": "useSharedEscrow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The address that pays for the account rent (if different from bidder)",
            "in": "query",
            "name": "rentPayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Time until the bid expires in ms",
            "in": "query",
            "name": "expireIn",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/trait_bid": {
      "get": {
        "operationId": "TraitBidTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "bidState": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "txs",
                        "bidState"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Creates the transaction to place a trait bid on a collection",
        "summary": "Place Trait Bid",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The placer of the bid",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The price to bid on the NFTs",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The amount of NFTs to bid on",
            "in": "query",
            "name": "quantity",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "description": "The collection ID to place the bid on",
            "in": "query",
            "name": "collId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maker broker for getting fee rebates",
            "in": "query",
            "name": "makerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Traits and values to bid on\nFormat must match the following JSON string: `{\"trait_type\": \"value\"}`",
            "in": "query",
            "name": "traits",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": {
              "trait_type": "value"
            }
          },
          {
            "description": "Use Shared Escrow",
            "in": "query",
            "name": "useSharedEscrow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The address that pays for the account rent (if different from bidder)",
            "in": "query",
            "name": "rentPayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Time until the bid expires in ms",
            "in": "query",
            "name": "expireIn",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/collection_bid": {
      "get": {
        "operationId": "CollectionBidTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "txs": {
                          "items": {
                            "properties": {
                              "tx": {
                                "type": "string",
                                "format": "byte",
                                "nullable": true
                              },
                              "txV0": {
                                "type": "string",
                                "format": "byte"
                              },
                              "lastValidBlockHeight": {
                                "type": "number",
                                "format": "double",
                                "nullable": true
                              },
                              "metadata": {
                                "additionalProperties": false,
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "txV0"
                            ],
                            "type": "object",
                            "additionalProperties": false
                          },
                          "type": "array"
                        },
                        "bidState": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "txs",
                        "bidState"
                      ],
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to place a collection wide bid",
        "summary": "Place Collection Bid",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The placer of the bid",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The price to bid on the NFTs",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The amount of NFTs to bid on",
            "in": "query",
            "name": "quantity",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "description": "The collection ID to place the bid on",
            "in": "query",
            "name": "collId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maker broker for getting fee rebates",
            "in": "query",
            "name": "makerBroker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use Shared Escrow",
            "in": "query",
            "name": "useSharedEscrow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The address that pays for the account rent (if different from bidder)",
            "in": "query",
            "name": "rentPayer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Time until the bid expires in ms",
            "in": "query",
            "name": "expireIn",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Amount of SOL to top up at the same time",
            "in": "query",
            "name": "topUp",
            "required": false,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/edit_bid": {
      "get": {
        "operationId": "EditBidTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "txs": {
                      "items": {
                        "properties": {
                          "tx": {
                            "type": "string",
                            "format": "byte",
                            "nullable": true
                          },
                          "txV0": {
                            "type": "string",
                            "format": "byte"
                          },
                          "lastValidBlockHeight": {
                            "type": "number",
                            "format": "double",
                            "nullable": true
                          },
                          "metadata": {
                            "additionalProperties": false,
                            "type": "object",
                            "nullable": true
                          }
                        },
                        "required": [
                          "txV0"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "bidState": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "txs",
                    "bidState"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to edit a bid",
        "summary": "Edit Bid",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The bid state address",
            "in": "query",
            "name": "bidStateAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The new price of the Bid",
            "in": "query",
            "name": "price",
            "required": false,
            "schema": {
              "format": "float",
              "type": "number",
              "minimum": 0
            }
          },
          {
            "description": "The amount of NFTs to bid on",
            "in": "query",
            "name": "quantity",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "description": "Time until the bid expires in ms",
            "in": "query",
            "name": "expireIn",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The private taker of the transaction",
            "in": "query",
            "name": "privateTaker",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Use Shared Escrow",
            "in": "query",
            "name": "useSharedEscrow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/cancel_bid": {
      "get": {
        "operationId": "CancelColBidTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "txs": {
                      "items": {
                        "properties": {
                          "tx": {
                            "type": "string",
                            "format": "byte",
                            "nullable": true
                          },
                          "txV0": {
                            "type": "string",
                            "format": "byte"
                          },
                          "lastValidBlockHeight": {
                            "type": "number",
                            "format": "double",
                            "nullable": true
                          },
                          "metadata": {
                            "additionalProperties": false,
                            "type": "object",
                            "nullable": true
                          }
                        },
                        "required": [
                          "txV0"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "type": "array"
                    },
                    "bidState": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "txs",
                    "bidState"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to cancel a collection bid",
        "summary": "Cancel Bid",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The bid state address",
            "in": "query",
            "name": "bidStateAddress",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The blockhash to use for the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "Priority fee to assign to the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/tx/deposit_withdraw_escrow": {
      "get": {
        "operationId": "DepositWithdrawEscrownTx",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "description": "Creates the transaction to deposit or withdraw from an escrow account",
        "summary": "Deposit/Withdraw Escrow",
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The action to perform. Either \"deposit\" or \"withdraw\"",
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "DEPOSIT",
                "WITHDRAW"
              ],
              "type": "string"
            }
          },
          {
            "description": "The owner of the Margin account",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The amount of SOL to deposit/withdraw",
            "in": "query",
            "name": "lamports",
            "required": true,
            "schema": {
              "format": "float",
              "type": "number"
            }
          },
          {
            "description": "The blockhash to be passed into the transaction",
            "in": "query",
            "name": "blockhash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Compute units for the transaction",
            "in": "query",
            "name": "compute",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "description": "The priority in micro-lamports to be used for the transaction",
            "in": "query",
            "name": "priorityMicroLamports",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "tags": [
          "Shared Escrow"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.mainnet.tensordev.io/api/v1"
    }
  ]
}